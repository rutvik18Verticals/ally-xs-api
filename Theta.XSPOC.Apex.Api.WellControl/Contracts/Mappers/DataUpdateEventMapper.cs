using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Theta.XSPOC.Apex.Api.Common.Converters;
using Theta.XSPOC.Apex.Api.WellControl.Contracts.Responses;
using Theta.XSPOC.Apex.Api.WellControl.Contracts.V2;
using Theta.XSPOC.Apex.Api.WellControl.Integration.Models;
using Theta.XSPOC.Apex.Kernel.Collaboration.Models;
using Theta.XSPOC.Apex.Kernel.Data.Updates.Models;
using Theta.XSPOC.Apex.Kernel.Integration;

namespace Theta.XSPOC.Apex.Api.WellControl.Contracts.Mappers
{
    /// <summary>
    /// Maps domain models from the core logic into a <seealso cref="ProcessDataUpdateContract"/> for the integration layer 
    /// to transmit to other services.
    /// Also maps a <seealso cref="ProcessDataUpdateContract"/> received by the integration layer into
    /// <seealso cref="DataUpdateEvent"/> domain model.
    /// </summary>
    public class DataUpdateEventMapper
    {

        #region Public Mapping Methods

        /// <summary>
        /// Maps the <paramref name="dataUpdate"/> the core logic produced to a <seealso cref="DataUpdateEvent"/>
        /// that the integration layer can transmit.
        /// </summary>
        /// <param name="dataUpdate">The <seealso cref="ProcessDataUpdateContract"/> generated by the core logic.</param>
        /// <returns>A <seealso cref="DataUpdateEvent"/> containing the data passed in.</returns>
        public static DataUpdateEvent Map(ProcessDataUpdateContract dataUpdate)
        {
            if (dataUpdate == null)
            {
                return null;
            }

            return new DataUpdateEvent()
            {
                Action = dataUpdate.Action,
                Payload = dataUpdate.Payload,
                PayloadType = dataUpdate.PayloadType,
                ResponseMetadata = dataUpdate.ResponseMetadata
            };
        }

        /// <summary>
        /// Maps the <paramref name="dataUpdateEvent"/> the integration layer received into a <seealso cref="DataUpdateEvent"/>
        /// that the core logic uses.
        /// </summary>
        /// <param name="dataUpdateEvent">The <seealso cref="DataUpdateEvent"/> received by the integration
        /// layer.</param>
        /// <param name="transactionId">The output param transaction id.</param>
        /// <returns>A <seealso cref="UpdatePayload"/> containing the data passed in.</returns>
        public static UpdatePayload Map(WithCorrelationId<DataUpdateEvent> dataUpdateEvent, out int transactionId)
        {
            if (dataUpdateEvent == null || dataUpdateEvent.Value?.Payload == null)
            {
                transactionId = 0;

                return null;
            }

            var responsePayloadData = JsonConvert.DeserializeObject<WithCorrelationId<ProcessDeviceOperationData>>(dataUpdateEvent.Value.Payload);
            transactionId = responsePayloadData.Value.TransactionId;

            var updatePayload = new UpdatePayload()
            {
                Key = new List<UpdateColumnValuePair>()
                    {
                        new UpdateColumnValuePair ()
                        {
                            Column = "TransactionId",
                            Value = responsePayloadData.Value.TransactionId.ToString(),
                        }
                    }
            };
            updatePayload.Data = new List<UpdateColumnValuePair>()
            {
                new UpdateColumnValuePair()
                {
                    Column = "TransactionId",
                    Value = responsePayloadData.Value.TransactionId.ToString(),
                },
                new UpdateColumnValuePair()
                {
                    Column = "Result",
                    Value = responsePayloadData.Value.CommunicationStatus,
                },
                new UpdateColumnValuePair()
                {
                    Column = "Processed",
                    Value = responsePayloadData.Value.OperationUtcDate.ToString(),
                },
            };

            if (responsePayloadData.Value.PayloadType == PayloadType.GetData)
            {
                var getdataPayload = JsonConvert.DeserializeObject<GetDataPayload>(responsePayloadData.Value.Payload);
                updatePayload.Data.Add(new UpdateColumnValuePair()
                {
                    Column = "Output",
                    Value = Convert.ToBase64String(getdataPayload.Output),
                });
            }

            return updatePayload;
        }

        /// <summary>
        /// Maps the <paramref name="dataUpdateEvent"/> the integration layer received into a <seealso cref="DataUpdateEvent"/>
        /// that the core logic uses.
        /// </summary>
        /// <param name="dataUpdateEvent">The <seealso cref="DataUpdateEvent"/> received by the integration
        /// layer.</param>
        /// <param name="nodeId">The output param node id.</param>
        /// <returns>A <seealso cref="UpdatePayload"/> containing the data passed in.</returns>
        public static UpdatePayload MapUpdateNodeData(DataUpdateEvent dataUpdateEvent, out string nodeId)
        {
            if (dataUpdateEvent == null)
            {
                nodeId = string.Empty;

                return null;
            }

            var nodeData = JsonConvert.DeserializeObject<UpdatePayload>(dataUpdateEvent.Payload);

            nodeId = nodeData.Key[0].Value.ToString();

            return nodeData;
        }

        /// <summary>
        /// Maps the <paramref name="data"/> the integration layer received into a <seealso cref="WellControlResponse"/>
        /// that the core logic uses.
        /// </summary>
        /// <param name="data">The <seealso cref="DataUpdateEvent"/> received by the integration
        /// layer.</param>
        /// <param name="result">The <seealso cref="ConsumerBaseAction"/> response from service.</param>
        /// <param name="action">The well control action.</param>
        /// <returns></returns>
        public static WellControlResponse GetBroadcastMessage(WithCorrelationId<DataUpdateEvent> data, ConsumerBaseAction result, string action)
        {
            if (data == null)
            {
                return null;
            }

            WellControlResponse response = new WellControlResponse();
            if (action == "update")
            {
                var convertor = new List<JsonConverter>();
                convertor.Add(new CustomDateTimeConverter());

                var responsePayloadData =
                    JsonConvert.DeserializeObject<WithCorrelationId<ProcessDeviceOperationData>>(data.Value.Payload,
                    convertor.ToArray());

                if (responsePayloadData.Value.CommunicationStatus == "OK")
                {
                    response.Status = "Success";
                    response.StatusMessage = "Transaction updated successfully";
                    response.Payload = data.Value.Payload;
                }
                else
                {
                    response.Status = "Failure";
                    response.StatusMessage = responsePayloadData.Value.CommunicationStatus;
                }
            }
            else if (action == "getdata")
            {
                var getdataPayload = JsonConvert.DeserializeObject<WithCorrelationId<GetDataPayload>>(data.Value.Payload);
                if (result == ConsumerBaseAction.Success)
                {
                    response.Status = "Success";
                    response.StatusMessage = "Transaction updated successfully";
                    response.Payload = data.Value.Payload;
                }
                else
                {
                    response.Status = "Failure";
                    response.StatusMessage = getdataPayload.Value.CommunicationStatus;
                }
            }
            else
            {
                if (result == ConsumerBaseAction.Success)
                {
                    response.Status = "Success";
                    response.StatusMessage = "Well updated successfully";
                    response.Payload = data.Value.Payload;
                }
                else if (result == ConsumerBaseAction.Reject)
                {
                    response.Status = "Failure";
                    response.StatusMessage = "Failed to update well.";
                }
            }
            response.Id = data.CorrelationId.ToString();
            response.DateCreated = DateTime.UtcNow;

            return response;
        }

        #endregion

    }
}
